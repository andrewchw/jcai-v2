#!/usr/bin/env python3
"""
Multi-user setup script

This script sets up the multi-user environment by:
1. Initializing the database
2. Creating necessary directories
3. Generating and storing encryption keys (if not already present)
4. Setting up default users (if required)

Usage:
    python -m app.scripts.setup_multi_user
"""

import os
import sys
import logging
import secrets
from pathlib import Path
from cryptography.fernet import Fernet

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Import required modules
from app.core.database import Base, engine
from app.core.init_db import init_db

def setup_environment():
    """Setup the multi-user environment"""
    logger.info("Setting up multi-user environment...")
    
    # Ensure data directory exists
    data_dir = Path(__file__).parent.parent.parent / "data"
    data_dir.mkdir(exist_ok=True)
    logger.info(f"Data directory: {data_dir}")
    
    # Generate encryption key file if not exists
    key_file = data_dir / "encryption_key.txt"
    env_key = os.environ.get("JIRA_TOKEN_ENCRYPTION_KEY", "")
    
    if not key_file.exists() and not env_key:
        # Generate new key
        key = Fernet.generate_key().decode()
        with open(key_file, "w") as f:
            f.write(key)
        logger.info(f"Generated new encryption key in {key_file}")
        
        # Export to environment
        os.environ["JIRA_TOKEN_ENCRYPTION_KEY"] = key
        
        # Add to .env if it exists
        env_file = Path(__file__).parent.parent.parent / ".env"
        if env_file.exists():
            with open(env_file, "a") as f:
                f.write(f"\n# Generated by setup_multi_user.py\nJIRA_TOKEN_ENCRYPTION_KEY={key}\n")
            logger.info(f"Added encryption key to .env file")
    elif key_file.exists():
        # Load existing key from file
        with open(key_file, "r") as f:
            key = f.read().strip()
            os.environ["JIRA_TOKEN_ENCRYPTION_KEY"] = key
        logger.info(f"Loaded existing encryption key from {key_file}")
    else:
        # Use existing key from environment
        logger.info(f"Using encryption key from environment variable")
    
    # Initialize database
    init_db()
    logger.info("Database initialized")
    
    return {
        "success": True,
        "data_dir": str(data_dir),
        "key_file": str(key_file),
        "database_initialized": True
    }

if __name__ == "__main__":
    result = setup_environment()
    if result["success"]:
        logger.info("Multi-user environment setup completed successfully")
    else:
        logger.error("Failed to set up multi-user environment")
        sys.exit(1)
