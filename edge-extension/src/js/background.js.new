/**
 * Background service worker for the JIRA Chatbot Assistant
 * Handles authentication, notifications, and communication with the Python server
 */

// Constants
const API_BASE_URL = 'http://localhost:8000/api';
const TOKEN_CHECK_INTERVAL = 5 * 60 * 1000; // 5 minutes

// Token state
let tokenState = {
    isAuthenticated: false,
    tokenData: null,
    lastChecked: null
};

// Initialize the extension
async function initialize() {
    console.log('JIRA Chatbot Assistant background service worker initialized');

    // Load token state from storage
    const storedState = await chrome.storage.local.get(['tokenState']);
    if (storedState.tokenState) {
        tokenState = storedState.tokenState;
        console.log('Loaded token state from storage:', tokenState.isAuthenticated ? 'Authenticated' : 'Not authenticated');
    }

    // Start periodic token checking
    if (tokenState.isAuthenticated) {
        startTokenChecking();
    }

    // Listen for side panel connection
    chrome.runtime.onConnect.addListener(port => {
        if (port.name === 'sidebar') {
            handleSidebarConnection(port);
        }
    });
}

/**
 * Handle connection with the sidebar
 * @param {*} port - The connection port
 */
function handleSidebarConnection(port) {
    console.log('Sidebar connected');

    // Send initial token state
    port.postMessage({
        type: 'auth-status',
        payload: {
            isAuthenticated: tokenState.isAuthenticated
        }
    });

    // Listen for messages from sidebar
    port.onMessage.addListener(async (message) => {
        console.log('Received message from sidebar:', message);

        switch (message.type) {
            case 'login':
                initiateLogin();
                break;

            case 'logout':
                await performLogout();
                port.postMessage({
                    type: 'auth-status',
                    payload: {
                        isAuthenticated: false
                    }
                });
                break;

            case 'check-token':
                const tokenStatus = await checkOAuthToken();
                port.postMessage({
                    type: 'token-status',
                    payload: tokenStatus
                });
                break;

            case 'get-jira-projects':
                const projects = await fetchJiraProjects();
                port.postMessage({
                    type: 'jira-projects',
                    payload: projects
                });
                break;

            case 'get-jira-tasks':
                const tasks = await fetchJiraTasks(message.payload);
                port.postMessage({
                    type: 'jira-tasks',
                    payload: tasks
                });
                break;
        }
    });

    // Handle disconnect
    port.onDisconnect.addListener(() => {
        console.log('Sidebar disconnected');
    });
}

/**
 * Initiate OAuth login process
 */
function initiateLogin() {
    console.log('Initiating login process');

    const authUrl = `${API_BASE_URL}/auth/oauth/login`;

    chrome.tabs.create({ url: authUrl }, (tab) => {
        // Track this tab for the OAuth callback
        chrome.tabs.onUpdated.addListener(function listener(tabId, changeInfo, tab) {
            // Check if this is our auth tab and if it's on the callback URL
            if (tabId === tab.id && changeInfo.url && changeInfo.url.includes(`${API_BASE_URL}/auth/oauth/callback`)) {
                console.log('OAuth callback detected:', changeInfo.url);

                // Extract success status from URL (e.g., ?success=true)
                const url = new URL(changeInfo.url);
                const success = url.searchParams.get('success') === 'true';
                const isSetupExample = url.searchParams.get('setup_example') === 'true';

                // Only process complete auth flow (success=true), not initial redirect
                if (success) {
                    console.log('Authentication successful');
                    chrome.tabs.onUpdated.removeListener(listener);
                    handleSuccessfulLogin();

                    // Close the auth tab after a short delay
                    setTimeout(() => {
                        chrome.tabs.remove(tabId);
                    }, 2000);
                } else if (!isSetupExample) {
                    // This is a failure callback, not just the initial setup
                    console.error('Authentication failed');
                    chrome.tabs.onUpdated.removeListener(listener);

                    // Notify any open sidebars
                    chrome.runtime.sendMessage({
                        type: 'auth-failed',
                        payload: {
                            message: 'Authentication failed. Please try again.'
                        }
                    });

                    // Close the auth tab
                    setTimeout(() => {
                        chrome.tabs.remove(tabId);
                    }, 2000);
                } else {
                    console.log('Setting up OAuth example, waiting for completion...');
                    // Don't remove listener yet as we're waiting for the success parameter
                }
            }
        });
    });
}

/**
 * Handle successful login
 */
async function handleSuccessfulLogin() {
    // Get token status from API
    const tokenStatus = await checkOAuthToken();

    if (tokenStatus && (tokenStatus.valid || tokenStatus.status === "active")) {
        tokenState = {
            isAuthenticated: true,
            tokenData: tokenStatus,
            lastChecked: new Date().toISOString()
        };

        // Save to storage
        await chrome.storage.local.set({ tokenState });

        // Start periodic token checking
        startTokenChecking();

        // Notify any open sidebars
        chrome.runtime.sendMessage({
            type: 'auth-status',
            payload: {
                isAuthenticated: true
            }
        });
    }
}

/**
 * Check OAuth token status
 */
async function checkOAuthToken() {
    try {
        const response = await fetch(`${API_BASE_URL}/auth/oauth/token/status`);
        if (!response.ok) throw new Error('Failed to check token status');

        const data = await response.json();
        console.log('Token status:', data);
        return data;
    } catch (error) {
        console.error('Error checking token:', error);
        return null;
    }
}

/**
 * Start periodic token checking
 */
function startTokenChecking() {
    console.log('Starting periodic token checking');

    // Clear any existing interval
    if (window.tokenCheckIntervalId) {
        clearInterval(window.tokenCheckIntervalId);
    }

    // Set new interval
    window.tokenCheckIntervalId = setInterval(async () => {
        console.log('Checking token status...');
        const tokenStatus = await checkOAuthToken();

        if (tokenStatus && (tokenStatus.valid || tokenStatus.status === "active")) {
            // Update token state
            tokenState = {
                ...tokenState,
                tokenData: tokenStatus,
                lastChecked: new Date().toISOString()
            };

            // Save to storage
            await chrome.storage.local.set({ tokenState });

            // Notify any open sidebars
            chrome.runtime.sendMessage({
                type: 'token-status',
                payload: tokenStatus
            });
        } else {
            // Token is no longer valid
            console.log('Token is no longer valid');
            await performLogout();
        }
    }, TOKEN_CHECK_INTERVAL);
}

/**
 * Perform logout
 */
async function performLogout() {
    try {
        // Call logout API
        await fetch(`${API_BASE_URL}/auth/oauth/logout`);

        // Reset token state
        tokenState = {
            isAuthenticated: false,
            tokenData: null,
            lastChecked: null
        };

        // Clear from storage
        await chrome.storage.local.set({ tokenState });

        // Stop token checking
        if (window.tokenCheckIntervalId) {
            clearInterval(window.tokenCheckIntervalId);
            window.tokenCheckIntervalId = null;
        }

        console.log('Logout successful');
        return true;
    } catch (error) {
        console.error('Error during logout:', error);
        return false;
    }
}

/**
 * Fetch Jira projects
 */
async function fetchJiraProjects() {
    try {
        const response = await fetch(`${API_BASE_URL}/jira/projects`);
        if (!response.ok) throw new Error('Failed to fetch projects');

        const data = await response.json();
        return data;
    } catch (error) {
        console.error('Error fetching projects:', error);
        return [];
    }
}

/**
 * Fetch Jira tasks
 */
async function fetchJiraTasks(filters = {}) {
    try {
        const url = new URL(`${API_BASE_URL}/jira/issues`);

        // Add filters to query params
        if (filters.project) url.searchParams.append('project', filters.project);
        if (filters.status) url.searchParams.append('status', filters.status);

        const response = await fetch(url);
        if (!response.ok) throw new Error('Failed to fetch tasks');

        const data = await response.json();
        return data;
    } catch (error) {
        console.error('Error fetching tasks:', error);
        return [];
    }
}

// Initialize on service worker activation
initialize();
