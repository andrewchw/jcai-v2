/**
 * Handle successful login
 */
async function handleSuccessfulLogin() {
    // Log the current state for debugging
    console.log('Handling successful login with user ID:', tokenState.userId);

    // Store the current user ID first to ensure we don't lose it
    const currentUserId = tokenState.userId || USER_ID;

    // Ensure we have a valid user ID
    if (!tokenState.userId) {
        console.error('No user ID found during login completion! Using fallback USER_ID');
        tokenState.userId = USER_ID;
        // Save immediately to ensure consistency
        await chrome.storage.local.set({ tokenState });
    }

    // First, update authentication state immediately to avoid race conditions
    tokenState.isAuthenticated = true;

    // Save the initial authenticated state right away
    await chrome.storage.local.set({ tokenState });

    // Notify sidebars about the initial authentication success
    await notifySidebarsAboutAuth(true);

    // Now check the token with the confirmed user ID to get complete token info
    const tokenStatus = await checkOAuthToken();

    // Even if token check fails, we should remain authenticated at this point
    // as the login was already successful

    // Update tokenState with complete info
    tokenState = {
        isAuthenticated: true,  // Always set to true on successful login
        tokenData: tokenStatus || { status: "active", valid: true },
        lastChecked: new Date().toISOString(),
        userId: currentUserId // Use saved ID from before
    };

    // Log what we're saving to storage
    console.log('Saving authenticated state with user ID:', tokenState.userId);

    // Save to storage
    await chrome.storage.local.set({ tokenState });

    // Start periodic token checking
    startTokenChecking();

    console.log('Notifying sidebars about successful authentication');

    // Notify sidebars using our dedicated function (replaces direct messaging)
    await notifySidebarsAboutAuth(true);

    // Also send token status
    try {
        chrome.runtime.sendMessage({
            type: 'token-status',
            payload: tokenState.tokenData
        });
        console.log('Sent token status via runtime.sendMessage');
    } catch (err) {
        console.error('Error sending token status message:', err);
    }

    console.log('Sent authentication success messages to sidebars');
}

/**
 * Notify all sidebars about authentication status
 * @param {boolean} isAuthenticated - The current authentication status
 */
async function notifySidebarsAboutAuth(isAuthenticated) {
    console.log('Notifying all sidebars about auth status:', isAuthenticated);

    // Method 1: Use runtime messaging (works for non-connected panels)
    try {
        chrome.runtime.sendMessage({
            type: 'auth-status',
            payload: {
                isAuthenticated: isAuthenticated
            }
        });

        console.log('Sent auth status via runtime.sendMessage');
    } catch (err) {
        console.error('Error sending runtime message:', err);
    }

    // Method 2: Use direct port connections (more reliable for connected panels)
    try {
        // Chrome Extensions API changed over time, handle multiple cases
        const ports = chrome.extension?.getConnections ?
                     chrome.extension.getConnections() :
                     (chrome.runtime?.connections || []);

        console.log(`Attempting to notify ${ports.length} direct connections`);

        // Send to each connected port
        if (ports && ports.length > 0) {
            ports.forEach(port => {
                if (port.name === 'sidebar') {
                    try {
                        port.postMessage({
                            type: 'auth-status',
                            payload: { isAuthenticated: isAuthenticated }
                        });
                        console.log('Directly notified sidebar port');
                    } catch (err) {
                        console.error('Error sending to port:', err);
                    }
                }
            });
        } else {
            console.log('No direct ports found to communicate with sidebar');
        }
    } catch (err) {
        console.error('Error accessing extension ports:', err);
    }

    // Method 3: Store in local storage as a fallback mechanism
    // This helps when the sidebar is opened after authentication
    try {
        await chrome.storage.local.set({
            lastAuthStatus: {
                isAuthenticated: isAuthenticated,
                timestamp: Date.now()
            }
        });
        console.log('Saved auth status to local storage as fallback');
    } catch (err) {
        console.error('Error saving auth status to storage:', err);
    }
}
