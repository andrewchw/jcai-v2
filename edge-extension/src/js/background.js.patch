// Authentication flow fixes for background.js

/**
 * Initiate OAuth login process
 */
function initiateLogin() {
    console.log('Initiating login process');

    // Make sure the user ID is defined and properly saved before proceeding
    if (!tokenState.userId) {
        tokenState.userId = USER_ID;
    }

    // IMPORTANT: Save to storage and wait for it to complete before creating the auth URL
    // This ensures the user ID is consistent between storage and memory
    chrome.storage.local.set({ tokenState }, () => {
        console.log('User ID confirmed in storage:', tokenState.userId);

        // Use the multi-user OAuth v2 endpoint with explicit user ID from tokenState
        const authUrl = `${API_BASE_URL}/auth/oauth/v2/login?user_id=${encodeURIComponent(tokenState.userId)}`;

        console.log('Login URL created with user ID:', tokenState.userId);

        chrome.tabs.create({ url: authUrl }, (tab) => {
            // Track this tab for the OAuth callback
            chrome.tabs.onUpdated.addListener(function listener(tabId, changeInfo, tab) {
                // Check if this is our auth tab and if it's on the callback URL
                if (tabId === tab.id && changeInfo.url && changeInfo.url.includes(`/callback`)) {
                    console.log('OAuth callback detected:', changeInfo.url);
                    
                    // Extract success status from URL (e.g., ?success=true)
                    const url = new URL(changeInfo.url);
                    const success = url.searchParams.get('success') === 'true';
                    const isSetupExample = url.searchParams.get('setup_example') === 'true';
                    
                    // Look for additional indicators of success in the URL
                    const hasCode = url.searchParams.has('code');
                    const isCallback = changeInfo.url.includes('/callback');
                    const explicitSuccess = (success === true) || (hasCode && isCallback);
                    
                    console.log(`Auth callback analyzed: explicit success=${success}, hasCode=${hasCode}, isCallback=${isCallback}`);
                    
                    // Only process complete auth flow (success=true), not initial redirect
                    if (explicitSuccess) {
                        console.log('Authentication successful');
                        chrome.tabs.onUpdated.removeListener(listener);
                        handleSuccessfulLogin();

                        // Close the auth tab after a short delay
                        setTimeout(() => {
                            chrome.tabs.remove(tabId);
                        }, 2000);
                    } else if (isSetupExample) {
                        // This is the setup example flow, wait for the success parameter to be added
                        console.log('Setup example flow detected, waiting for completion');
                        // Don't remove the listener yet, as the auth page may redirect with success=true
                    } else {
                        // This is a failure callback
                        console.error('Authentication failed');
                        chrome.tabs.onUpdated.removeListener(listener);

                        // Notify any open sidebars
                        chrome.runtime.sendMessage({
                            type: 'auth-failed',
                            payload: {
                                message: 'Authentication failed. Please try again.'
                            }
                        });

                        // Close the auth tab
                        setTimeout(() => {
                            chrome.tabs.remove(tabId);
                        }, 2000);
                    }
                }
            });
        });
    });
}

/**
 * Handle successful login
 */
async function handleSuccessfulLogin() {
    // Log the current state for debugging
    console.log('Handling successful login with user ID:', tokenState.userId);

    // Store the current user ID first to ensure we don't lose it
    const currentUserId = tokenState.userId || USER_ID;

    // Ensure we have a valid user ID
    if (!tokenState.userId) {
        console.error('No user ID found during login completion! Using fallback USER_ID');
        tokenState.userId = USER_ID;
        // Save immediately to ensure consistency
        await chrome.storage.local.set({ tokenState });
    }

    // First, update authentication state immediately to avoid race conditions
    tokenState.isAuthenticated = true;
    
    // Save the initial authenticated state right away
    await chrome.storage.local.set({ tokenState });
    
    // Notify sidebars about the initial authentication success
    await notifySidebarsAboutAuth(true);

    // Now check the token with the confirmed user ID to get complete token info
    const tokenStatus = await checkOAuthToken();
    
    // Even if token check fails, we should remain authenticated at this point
    // as the login was already successful
    
    // Update tokenState with complete info
    tokenState = {
        isAuthenticated: true,  // Always set to true on successful login
        tokenData: tokenStatus || { status: "active", valid: true },
        lastChecked: new Date().toISOString(),
        userId: currentUserId // Use saved ID from before
    };
    
    // Log what we're saving to storage
    console.log('Saving authenticated state with user ID:', tokenState.userId);

    // Save to storage
    await chrome.storage.local.set({ tokenState });

    // Start periodic token checking
    startTokenChecking();

    console.log('Notifying sidebars about successful authentication');
    
    // Notify sidebars about the authentication success
    await notifySidebarsAboutAuth(true);
    
    // Also send token status
    try {
        chrome.runtime.sendMessage({
            type: 'token-status',
            payload: tokenState.tokenData
        });
        console.log('Sent token status via runtime.sendMessage');
    } catch (err) {
        console.error('Error sending token status message:', err);
    }
    
    console.log('Sent authentication success messages to sidebars');
}

/**
 * Notify all sidebars about authentication status 
 * @param {boolean} isAuthenticated - The current authentication status
 */
async function notifySidebarsAboutAuth(isAuthenticated) {
    console.log('Notifying all sidebars about auth status:', isAuthenticated);
    
    // Method 1: Use runtime messaging (works for non-connected panels)
    try {
        chrome.runtime.sendMessage({
            type: 'auth-status',
            payload: {
                isAuthenticated: isAuthenticated
            }
        });
        
        console.log('Sent auth status via runtime.sendMessage');
    } catch (err) {
        console.error('Error sending runtime message:', err);
    }
    
    // Method 2: Use direct port connections (more reliable for connected panels)
    try {
        // Chrome Extensions API changed over time, handle multiple cases
        const ports = chrome.extension?.getConnections ? 
                     chrome.extension.getConnections() : 
                     (chrome.runtime?.connections || []);
                     
        console.log(`Attempting to notify ${ports.length} direct connections`);
        
        // Send to each connected port
        if (ports && ports.length > 0) {
            ports.forEach(port => {
                if (port.name === 'sidebar') {
                    try {
                        port.postMessage({
                            type: 'auth-status',
                            payload: { isAuthenticated: isAuthenticated }
                        });
                        console.log('Directly notified sidebar port');
                    } catch (err) {
                        console.error('Error sending to port:', err);
                    }
                }
            });
        } else {
            console.log('No direct ports found to communicate with sidebar');
        }
    } catch (err) {
        console.error('Error accessing extension ports:', err);
    }
    
    // Method 3: Store in local storage as a fallback mechanism
    // This helps when the sidebar is opened after authentication
    try {
        await chrome.storage.local.set({ 
            lastAuthStatus: {
                isAuthenticated: isAuthenticated,
                timestamp: Date.now()
            }
        });
        console.log('Saved auth status to local storage as fallback');
    } catch (err) {
        console.error('Error saving auth status to storage:', err);
    }
}

/**
 * Check OAuth token status
 */
async function checkOAuthToken() {
    try {
        // Ensure we have a valid user ID before making the request
        if (!tokenState.userId) {
            console.error('Missing user ID when checking token status, setting default');
            tokenState.userId = USER_ID;
            await chrome.storage.local.set({ tokenState });
        }

        console.log(`Checking token status for user ID: ${tokenState.userId}`);

        // Use the multi-user OAuth v2 endpoint instead of the single-user one
        // Include user ID as query parameter
        const response = await fetch(`${API_BASE_URL}/auth/oauth/v2/token/status?user_id=${encodeURIComponent(tokenState.userId)}`);

        if (!response.ok) {
            console.error(`Token status check failed with status: ${response.status}`);
            
            // In case of a 401/403 Unauthorized response, mark as not authenticated
            if (response.status === 401 || response.status === 403) {
                console.log('Received unauthorized response, marking as not authenticated');
                tokenState.isAuthenticated = false;
                await chrome.storage.local.set({ tokenState });
                
                // Notify sidebars that authentication is now invalid
                await notifySidebarsAboutAuth(false);
            }
            
            throw new Error('Failed to check token status');
        }
        
        const data = await response.json();
        console.log('Token status (detailed):', JSON.stringify(data, null, 2));

        // Update auth state based on token status
        // Server might return different formats, check all possible fields
        const isActive = data && 
                        (data.status === "active" || 
                        data.valid === true || 
                        data.expires_in_seconds > 0);
                        
        console.log('Token active state determined:', isActive);
        
        // If authentication state changed, update UI
        if (tokenState.isAuthenticated !== isActive) {
            console.log(`Authentication state changed from ${tokenState.isAuthenticated} to ${isActive}`);
            
            // Always update isAuthenticated based on token status
            tokenState.isAuthenticated = isActive;
            
            // Notify sidebars about the change
            await notifySidebarsAboutAuth(isActive);
        } else {
            // Always update isAuthenticated based on token status
            tokenState.isAuthenticated = isActive;
        }
        
        // Update token data
        tokenState.tokenData = data;
        tokenState.lastChecked = new Date().toISOString();
        
        // Save to storage
        await chrome.storage.local.set({ tokenState });
        
        // Always send token status update, even if auth state didn't change
        try {
            chrome.runtime.sendMessage({
                type: 'token-status',
                payload: data
            });
        } catch (error) {
            console.error('Error sending token status update:', error);
        }

        return data;
    } catch (error) {
        console.error('Error checking token:', error);
        return null;
    }
}

/**
 * Handle connection with the sidebar
 * @param {*} port - The connection port
 */
function handleSidebarConnection(port) {
    console.log('Sidebar connected');
    
    // Verify we have the latest authentication state before sending to sidebar
    try {
        // Send initial token state
        port.postMessage({
            type: 'auth-status',
            payload: {
                isAuthenticated: tokenState.isAuthenticated
            }
        });
        
        // Also send token data if we have it
        if (tokenState.tokenData) {
            port.postMessage({
                type: 'token-status',
                payload: tokenState.tokenData
            });
        }
        
        console.log('Sent initial token state to sidebar:', tokenState.isAuthenticated);
    } catch (err) {
        console.error('Error sending initial token state to sidebar:', err);
    }
    
    // Listen for messages from sidebar
    port.onMessage.addListener(async (message) => {
        console.log('Received message from sidebar:', message);

        try {
            switch (message.type) {
                case 'login':
                    initiateLogin();
                    break;
    
                case 'logout':
                    await performLogout();
                    port.postMessage({
                        type: 'auth-status',
                        payload: {
                            isAuthenticated: false
                        }
                    });
                    break;
    
                case 'check-token':
                    const tokenStatus = await checkOAuthToken();
                    port.postMessage({
                        type: 'token-status',
                        payload: tokenStatus || { valid: false, status: "unknown" }
                    });
                    break;
    
                case 'get-jira-projects':
                    const projects = await fetchJiraProjects();
                    port.postMessage({
                        type: 'jira-projects',
                        payload: projects
                    });
                    break;
    
                case 'get-jira-tasks':
                    const filters = message.payload || {};
                    const tasks = await fetchJiraTasks(filters);
                    port.postMessage({
                        type: 'jira-tasks',
                        payload: tasks
                    });
                    break;
    
                default:
                    console.warn('Unknown message type:', message.type);
            }
        } catch (error) {
            console.error('Error handling sidebar message:', error);
            
            // Send error back to sidebar
            try {
                port.postMessage({
                    type: 'error',
                    payload: {
                        message: error.message,
                        source: message.type
                    }
                });
            } catch (err) {
                console.error('Error sending error message to sidebar:', err);
            }
        }
    });
}
