/**
 * Background service worker for the JIRA Chatbot Assistant
 * Handles authentication, notifications, and communication with the Python server
 */

// Constants
const API_BASE_URL = 'http://localhost:8000/api';
const TOKEN_CHECK_INTERVAL = 5 * 60 * 1000; // 5 minutes

// Generate a unique user ID for this browser instance
const USER_ID = `edge-${Date.now()}-${Math.random().toString(36).substring(2, 10)}`;

// Token state
let tokenState = {
    isAuthenticated: false,
    tokenData: null,
    lastChecked: null,
    userId: USER_ID
};

// Initialize the extension
async function initialize() {
    console.log('JIRA Chatbot Assistant background service worker initialized');

    // Load token state from storage
    const storedState = await chrome.storage.local.get(['tokenState']);
    if (storedState.tokenState) {
        // Preserve the generated user ID if not already saved
        const savedUserId = storedState.tokenState.userId;
        tokenState = storedState.tokenState;

        // Make sure we have a user ID (might be missing in older versions)
        if (!tokenState.userId) {
            tokenState.userId = USER_ID;
            // Save the updated token state with the user ID
            await chrome.storage.local.set({ tokenState });
        }

        console.log('Loaded token state from storage:', tokenState.isAuthenticated ? 'Authenticated' : 'Not authenticated');
        console.log('Using user ID:', tokenState.userId);
    } else {
        // No saved state, save the initial state with user ID
        await chrome.storage.local.set({ tokenState });
        console.log('Created new state with user ID:', tokenState.userId);
    }

    // Start periodic token checking
    if (tokenState.isAuthenticated) {
        startTokenChecking();
    }

    // Listen for side panel connection
    chrome.runtime.onConnect.addListener(port => {
        if (port.name === 'sidebar') {
            handleSidebarConnection(port);
        }
    });
}

/**
 * Handle connection with the sidebar
 * @param {*} port - The connection port
 */
function handleSidebarConnection(port) {
    console.log('Sidebar connected');

    // Send initial token state
    port.postMessage({
        type: 'auth-status',
        payload: {
            isAuthenticated: tokenState.isAuthenticated
        }
    });

    // Listen for messages from sidebar
    port.onMessage.addListener(async (message) => {
        console.log('Received message from sidebar:', message);

        switch (message.type) {
            case 'login':
                initiateLogin();
                break;

            case 'logout':
                await performLogout();
                port.postMessage({
                    type: 'auth-status',
                    payload: {
                        isAuthenticated: false
                    }
                });
                break;

            case 'check-token':
                const tokenStatus = await checkOAuthToken();
                port.postMessage({
                    type: 'token-status',
                    payload: tokenStatus
                });
                break;

            case 'get-jira-projects':
                const projects = await fetchJiraProjects();
                port.postMessage({
                    type: 'jira-projects',
                    payload: projects
                });
                break;

            case 'get-jira-tasks':
                const tasks = await fetchJiraTasks(message.payload);
                port.postMessage({
                    type: 'jira-tasks',
                    payload: tasks
                });
                break;
        }
    });

    // Handle disconnect
    port.onDisconnect.addListener(() => {
        console.log('Sidebar disconnected');
    });
}

/**
 * Initiate OAuth login process
 */
function initiateLogin() {
    console.log('Initiating login process');

    // Make sure the user ID is defined and properly saved before proceeding
    if (!tokenState.userId) {
        tokenState.userId = USER_ID;
    }

    // IMPORTANT: Save to storage and wait for it to complete before creating the auth URL
    // This ensures the user ID is consistent between storage and memory
    chrome.storage.local.set({ tokenState }, () => {
        console.log('User ID confirmed in storage:', tokenState.userId);

        // Use the multi-user OAuth v2 endpoint with explicit user ID from tokenState
        const authUrl = `${API_BASE_URL}/auth/oauth/v2/login?user_id=${encodeURIComponent(tokenState.userId)}`;

        console.log('Login URL created with user ID:', tokenState.userId);

        chrome.tabs.create({ url: authUrl }, (tab) => {
            // Track this tab for the OAuth callback
            chrome.tabs.onUpdated.addListener(function listener(tabId, changeInfo, tab) {
                // Check if this is our auth tab and if it's on the callback URL
                if (tabId === tab.id && changeInfo.url && changeInfo.url.includes(`/callback`)) {
                    console.log('OAuth callback detected:', changeInfo.url);

                    // Extract success status from URL (e.g., ?success=true)
                    const url = new URL(changeInfo.url);
                    const success = url.searchParams.get('success') === 'true';
                    const isSetupExample = url.searchParams.get('setup_example') === 'true';
                    // Only process complete auth flow (success=true), not initial redirect
                    if (success) {
                        console.log('Authentication successful');
                        chrome.tabs.onUpdated.removeListener(listener);
                        handleSuccessfulLogin();

                        // Close the auth tab after a short delay
                        setTimeout(() => {
                            chrome.tabs.remove(tabId);
                        }, 2000);
                    } else if (isSetupExample) {
                        // This is the setup example flow, wait for the success parameter to be added
                        console.log('Setup example flow detected, waiting for completion');
                        // Don't remove the listener yet, as the auth page may redirect with success=true
                    } else {
                        // This is a failure callback
                        console.error('Authentication failed');
                        chrome.tabs.onUpdated.removeListener(listener);

                        // Notify any open sidebars
                        chrome.runtime.sendMessage({
                            type: 'auth-failed',
                            payload: {
                                message: 'Authentication failed. Please try again.'
                            }
                        });

                        // Close the auth tab
                        setTimeout(() => {
                            chrome.tabs.remove(tabId);
                        }, 2000);
                    }
                }
            });
        });
    }
}

/**
 * Handle successful login
 */
async function handleSuccessfulLogin() {
    // Log the current state for debugging
    console.log('Handling successful login with user ID:', tokenState.userId);

    // Store the current user ID first to ensure we don't lose it
    const currentUserId = tokenState.userId;

    // Get token status from API using the current user ID - IMPORTANT
    if (!currentUserId) {
        console.error('No user ID found during login completion! Using fallback USER_ID');
        tokenState.userId = USER_ID;
        // Save immediately to ensure consistency
        await chrome.storage.local.set({ tokenState });
    }

    // Now check the token with the confirmed user ID
    const tokenStatus = await checkOAuthToken();

    // Always consider authenticated after successful login
    const isActive = tokenStatus && (tokenStatus.valid || tokenStatus.status === "active");

    // Create a new token state that explicitly maintains the user ID
    tokenState = {
        isAuthenticated: true,  // Always set to true on successful login
        tokenData: tokenStatus || { status: "unknown" },
        lastChecked: new Date().toISOString(),
        userId: currentUserId || USER_ID // Use current ID or fallback to generated one
    };

    // Log what we're saving to storage
    console.log('Saving authenticated state with user ID:', tokenState.userId);

    // Save to storage
    await chrome.storage.local.set({ tokenState });

    // Start periodic token checking
    startTokenChecking();

    console.log('Notifying sidebars about successful authentication');

    // Notify all connected sidebars
    chrome.runtime.sendMessage({
        type: 'auth-status',
        payload: {
            isAuthenticated: true
        }
    });

    // Also send token status
    chrome.runtime.sendMessage({
        type: 'token-status',
        payload: tokenState.tokenData
    });

    // Re-check connected ports and update them directly as well
    // This ensures the sidebar UI updates even if runtime messages aren't received
    const ports = chrome.runtime.connect ? chrome.extension.connect : [];
    if (Array.isArray(ports)) {
        ports.forEach(port => {
            if (port.name === 'sidebar') {
                port.postMessage({
                    type: 'auth-status',
                    payload: { isAuthenticated: true }
                });
            }
        });
    }

    console.log('Sent authentication success messages to sidebars');
}

/**
 * Check OAuth token status
 */
async function checkOAuthToken() {
    try {
        // Ensure we have a valid user ID before making the request
        if (!tokenState.userId) {
            console.error('Missing user ID when checking token status, setting default');
            tokenState.userId = USER_ID;
            await chrome.storage.local.set({ tokenState });
        }

        console.log(`Checking token status for user ID: ${tokenState.userId}`);

        // Use the multi-user OAuth v2 endpoint instead of the single-user one
        // Include user ID as query parameter
        const response = await fetch(`${API_BASE_URL}/auth/oauth/v2/status?user_id=${encodeURIComponent(tokenState.userId)}`);

        if (!response.ok) {
            console.error(`Token status check failed with status: ${response.status}`);
            throw new Error('Failed to check token status');
        }

        const data = await response.json();
        console.log('Token status (detailed):', JSON.stringify(data, null, 2));

        // Update auth state based on token status
        if (data && (data.status === "active" || data.valid)) {
            console.log('Valid token detected, ensuring auth state is updated');
            if (!tokenState.isAuthenticated) {
                tokenState.isAuthenticated = true;
                // Save to storage
                await chrome.storage.local.set({ tokenState });
                // Notify sidebars
                chrome.runtime.sendMessage({
                    type: 'auth-status',
                    payload: { isAuthenticated: true }
                });
            }
        }

        return data;
    } catch (error) {
        console.error('Error checking token:', error);
        return null;
    }
}

/**
 * Start periodic token checking
 */
function startTokenChecking() {
    console.log('Starting periodic token checking');

    // Clear any existing interval
    if (window.tokenCheckIntervalId) {
        clearInterval(window.tokenCheckIntervalId);
    }

    // Set new interval
    window.tokenCheckIntervalId = setInterval(async () => {
        console.log('Checking token status...');
        const tokenStatus = await checkOAuthToken();

        if (tokenStatus && (tokenStatus.valid || tokenStatus.status === "active")) {
            // Update token state
            tokenState = {
                ...tokenState,
                tokenData: tokenStatus,
                lastChecked: new Date().toISOString()
            };

            // Save to storage
            await chrome.storage.local.set({ tokenState });

            // Notify any open sidebars
            chrome.runtime.sendMessage({
                type: 'token-status',
                payload: tokenStatus
            });
        } else {
            // Token is no longer valid
            console.log('Token is no longer valid');
            await performLogout();
        }
    }, TOKEN_CHECK_INTERVAL);
}

/**
 * Perform logout
 */
async function performLogout() {
    try {
        // Call logout API - use the multi-user v2 endpoint with user ID
        await fetch(`${API_BASE_URL}/auth/oauth/v2/logout?user_id=${encodeURIComponent(tokenState.userId)}`);        // Reset token state but preserve user ID
        const userId = tokenState.userId;
        tokenState = {
            isAuthenticated: false,
            tokenData: null,
            lastChecked: null,
            userId: userId // Preserve the user ID
        };

        // Clear from storage
        await chrome.storage.local.set({ tokenState });

        // Stop token checking
        if (window.tokenCheckIntervalId) {
            clearInterval(window.tokenCheckIntervalId);
            window.tokenCheckIntervalId = null;
        }

        console.log('Logout successful');
        return true;
    } catch (error) {
        console.error('Error during logout:', error);
        return false;
    }
}

/**
 * Fetch Jira projects
 */
async function fetchJiraProjects() {
    try {
        const response = await fetch(`${API_BASE_URL}/jira/v2/projects?user_id=${encodeURIComponent(tokenState.userId)}`);
        if (!response.ok) throw new Error('Failed to fetch projects');

        const data = await response.json();
        return data;
    } catch (error) {
        console.error('Error fetching projects:', error);
        return [];
    }
}

/**
 * Fetch Jira tasks
 */
async function fetchJiraTasks(filters = {}) {
    try {
        const url = new URL(`${API_BASE_URL}/jira/v2/issues`);

        // Add user ID for multi-user support
        url.searchParams.append('user_id', tokenState.userId);

        // Add filters to query params
        if (filters.project) url.searchParams.append('project', filters.project);
        if (filters.status) url.searchParams.append('status', filters.status);

        const response = await fetch(url);
        if (!response.ok) throw new Error('Failed to fetch tasks');

        const data = await response.json();
        return data;
    } catch (error) {
        console.error('Error fetching tasks:', error);
        return [];
    }
}

// Initialize on service worker activation
initialize();
